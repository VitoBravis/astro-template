@use "variables" as *;
@use "functions" as *;

@mixin media-breakpoint-up($name) {
    @media (min-width: #{map-get($breakpoints, $name)}px) {
        @content;
    }
}

@mixin media-breakpoint-down($name) {
    @media (max-width: #{map-get($breakpoints, $name) - 1}px) {
        @content;
    }
}

@mixin media-breakpoint-range($from, $to) {
    @include media-breakpoint-up($from) {
        @include media-breakpoint-down($to) {
            @content;
        }
    }
}

@mixin with-option($modifierName, $modifierValue: null) {
    @if($modifierValue) {
        &[data-#{$modifierName}=#{$modifierValue}] {
            @content
        }
    } @else {
        &[data-#{$modifierName}] {
            @content
        }
    }
}

@mixin hover() {
    @media (hover: hover) {
        &:hover {
            @content
        }
    }
}

@mixin font($mobile, $tablet-md, $desktop-xl, $desktop-xxl, $desktop-fhd, $property: "font-size") {
    #{$property}: rem($mobile);

    @include media-breakpoint-up(xs) {
        #{$property}: #{clamped-between-points($mobile, $tablet-md, xs, md)};
    }

    @include media-breakpoint-up(md) {
        #{$property}: #{clamped-between-points($tablet-md, $desktop-xl, md, xl)};
    }

    @include media-breakpoint-up(xl) {
        #{$property}: #{clamped-between-points($desktop-xl, $desktop-xxl, xl, xxl)};

        @media (height <= 500px) {
            #{$property}: #{clamped-between-points($desktop-xl * 0.7, $desktop-xxl * 0.7, xl, xxl)};
        }
    }

    @include media-breakpoint-up(xxl) {
        #{$property}: #{clamped-between-points($desktop-xxl, $desktop-fhd, xxl, fhd)};

        @media (height <= 600px) {
            #{$property}: #{clamped-between-points($desktop-xxl * 0.7, $desktop-fhd * 0.7, xxl, fhd)};
        }
    }

    @include media-breakpoint-up(fhd) {
        #{$property}: #{rem($desktop-fhd)};

        @media (height <= 600px) {
            #{$property}: #{rem($desktop-fhd * 0.7)};
        }
    }

    @include media-breakpoint-up(qhd) {
        #{$property}: #{vw($desktop-fhd)};

        @media (height <= 600px) {
            #{$property}: #{vw($desktop-fhd * 0.7)};
        }
    }
}

@mixin safari {
    // Safari 11+
    @media not all and (min-resolution:.001dpcm) {
        @supports (-webkit-appearance: none) and (stroke-color: transparent) {
            @content;
        }
    }
}

/*
    - Адаптивные значения свойств для всех допустимых разрешений в единицах px, за исключением fhd - там используются vw
    - Можно передать значения false или null, в разрешения, которые не используются. Это сэкономит итоговый размер css файла
*/
@mixin adaptive-hard-values($property, $mobile, $tablet-768, $desktop-1280, $desktop-1440, $desktop-1920, $rem: false) {
    @if $mobile {
        @if $rem {
            #{$property}: rem($mobile);
        } @else {
            #{$property}: #{$mobile}px;
        }
    }

    @if $tablet-768 {
        @include media-breakpoint-up(md) {
            @if $rem {
                #{$property}: rem($tablet-768);
            } @else {
                #{$property}: #{$tablet-768}px;
            }
        }
    }

    @if $desktop-1280 {
        @include media-breakpoint-up(xl) {
            @if $rem {
                #{$property}: rem($desktop-1280);
            } @else {
                #{$property}: #{$desktop-1280}px;
            }
        }
    }

    @if $desktop-1440 {
        @include media-breakpoint-up(xxl) {
            @if $rem {
                #{$property}: rem($desktop-1440);
            } @else {
                #{$property}: #{$desktop-1440}px;
            }
        }
    }

    @if $desktop-1920 {
        @include media-breakpoint-up(fhd) {
            @if $rem {
                #{$property}: rem($desktop-1920);
            } @else {
                #{$property}: vw($desktop-1920);
            }
        }
    }
}

/*
    - Адаптивные значения свойств для всех допустимых разрешений в единицах vw, с возможностью ограничить минимальным
      и максимальным значением, если передать в качестве значения список из 3х элементов в порядке параметров функции clamp.
    - Можно передать значения false или null, в разрешения, которые не используются. Это сэкономит итоговый размер css файла
*/
@mixin adaptive-smooth-values($property, $mobile, $tablet-md, $desktop-xl, $desktop-xxl, $desktop-fhd) {
    @if $mobile {
        @if length($mobile) == 3 {
            $min: nth($mobile, 1);
            $value: nth($mobile, 2);
            $max: nth($mobile, 3);
            #{$property}: clamp(#{$min}px, #{vw($value, xs)}, #{$max}px);
        } @else {
            #{$property}: vw($mobile, xs);
        }
    }

    @if $tablet-md {
        @include media-breakpoint-up(md) {
            @if length($tablet-md) == 3 {
                $min: nth($tablet-md, 1);
                $value: nth($tablet-md, 2);
                $max: nth($tablet-md, 3);
                #{$property}: clamp(#{$min}px, #{vw($value, md)}, #{$max}px);
            } @else {
                #{$property}: vw($tablet-md, md);
            }
        }
    }

    @if $desktop-xl {
        @include media-breakpoint-up(xl) {
            @if length($desktop-xl) == 3 {
                $min: nth($desktop-xl, 1);
                $value: nth($desktop-xl, 2);
                $max: nth($desktop-xl, 3);
                #{$property}: clamp(#{$min}px, #{vw($value, xl)}, #{$max}px);
            } @else {
                #{$property}: vw($desktop-xl, xl);
            }
        }
    }

    @if $desktop-xxl {
        @include media-breakpoint-up(xxl) {
            @if length($desktop-xxl) == 3 {
                $min: nth($desktop-xxl, 1);
                $value: nth($desktop-xxl, 2);
                $max: nth($desktop-xxl, 3);
                #{$property}: clamp(#{$min}px, #{vw($value, xxl)}, #{$max}px);
            } @else {
                #{$property}: vw($desktop-xxl, xxl);
            }
        }
    }

    @if $desktop-fhd {
        @include media-breakpoint-up(fhd) {
            @if length($desktop-fhd) == 3 {
                $min: nth($desktop-fhd, 1);
                $value: nth($desktop-fhd, 2);
                $max: nth($desktop-fhd, 3);
                #{$property}: clamp(#{$min}px, #{vw($value)}, #{$max}px);
            } @else {
                #{$property}: vw($desktop-fhd);
            }
        }
    }
}

@mixin clamp-text($lines-count) {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $lines-count;
    line-clamp: $lines-count;
    -webkit-box-orient: vertical;
}

@mixin hide-native-scrollbar {
    scrollbar-width: none;

    &::-webkit-scrollbar {
        display: none;
    }
}

@mixin style-native-scrollbar {
    @-moz-document url-prefix("") {
        scrollbar-width: thin;
        scrollbar-color: var(--black) rgba(var(--black-rgb), 0.1);
    }

    &::-webkit-scrollbar {
        width: 5px;
        height: 5px;
    }

    &::-webkit-scrollbar-thumb {
        background-color: var(--black);
    }

    &::-webkit-scrollbar-track {
        -webkit-box-shadow: none;
        background-color: rgba(var(--black-rgb), 0.1);
    }
}
